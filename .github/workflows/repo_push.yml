#the purpose of this workflow is to run a plan for developer to see when changes are made to the terraform code 
name: "Push - Terraform"

on:
  #workflow is run when changes are made to a branch that doesnt have the name dev, preprod, or main
  #workflow is not run on these branches because commits should only be done on these branches through a merge
  #branch protection is in place to prevent an edit to these branches
  push: #lets a workflow run on and branch
    branches-ignore:
     - dev
     - preprod
     - main
      
#lines 15-17 are required in order to use OIDC role: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services#updating-your-github-actions-workflow
permissions:
  id-token: write
  contents: read

jobs:
  terraform-dev:
    name: "Push - Terraform Dev"
    runs-on: ubuntu-latest
    #env sets global environment variables throughout the workflow. 
    #If variable is set in a step it will not be kept in memory after step is executed
    env:
      ZONE: dev
      AWS_REGION: us-east-1
    #in the settings of this repository an environment has been created that stores secrets
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          #role to assume is the arn of the role I created in my AWS account
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          #session role can be named anything
          role-session-name: ${{ secrets.AWS_ASSUME_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }} 
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0

      - name: Terraform Init Dev
        id: init
        run: terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive -check -diff -write=false
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      #Checkov is a static code analysis tool created by bridgecrew 
      # It is used for scanning infrastructure as code (IaC) files for misconfigurations that may lead to security or compliance problems
      - name: Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          check: CKV_AWS_1,CKV_AWS_3,CKV_AWS_7,CKV_AWS_8,CKV_AWS_9,CKV_AWS_10,CKV_AWS_11,CKV_AWS_12,CKV_AWS_13,CKV_AWS_14,CKV_AWS_15,CKV_AWS_16,CKV_AWS_17,CKV_AWS_18,CKV_AWS_19,CKV_AWS_20,CKV_AWS_23,CKV_AWS_24,CKV_AWS_25,CKV_AWS_33,CKV_AWS_35,CKV_AWS_36,CKV_AWS_40,CKV_AWS_41,CKV_AWS_45,CKV_AWS_46,CKV_AWS_53,CKV_AWS_54,CKV_AWS_55,CKV_AWS_56,CKV_AWS_57,CKV_AWS_60,CKV_AWS_61,CKV_AWS_62,CKV_AWS_63,CKV_AWS_70,CKV_AWS_88,CKV_AWS_93,CKV_AWS_130,CKV_AWS_229,CKV_AWS_230,CKV_AWS_231,CKV_AWS_232,CKV2_AWS_1,CKV2_AWS_2,CKV2_AWS_6
          soft_fail: true
          #quiet: true
          #soft_fail: false
          #framework: terraform
          #output_format: github_failed_only # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif.

      - name: Terraform Plan Dev
        id: plan
        run: terraform plan -var zone=${{ env.ZONE }} -no-color -input=false
        # continue-on-error: true

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
